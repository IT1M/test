import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface ReportData {
  title: string;
  type: string;
  periodStart: Date;
  periodEnd: Date;
  generatedBy: {
    name: string;
    email: string;
  };
  dataSnapshot: {
    summary: {
      totalItems: number;
      totalQuantity: number;
      totalRejects: number;
      rejectRate: number;
    };
    byDestination: Record<string, { count: number; quantity: number; rejects: number }>;
    byCategory: Record<string, { count: number; quantity: number; rejects: number }>;
    topItems: Array<{
      itemName: string;
      batch: string;
      quantity: number;
      reject: number;
      destination: string;
    }>;
    highRejectItems: Array<{
      itemName: string;
      batch: string;
      quantity: number;
      reject: number;
      rejectRate: string;
    }>;
  };
  aiInsights?: string | null;
  createdAt: Date;
}

export function generatePDFReport(reportData: ReportData): jsPDF {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  let yPosition = 20;

  // Header with branding
  doc.setFillColor(34, 139, 34); // Saudi green
  doc.rect(0, 0, pageWidth, 30, "F");
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont("helvetica", "bold");
  doc.text("MAIS Inventory System", pageWidth / 2, 15, { align: "center" });
  
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(reportData.title, pageWidth / 2, 23, { align: "center" });

  // Reset text color
  doc.setTextColor(0, 0, 0);
  yPosition = 40;

  // Report metadata
  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  doc.text(`Report Type: ${reportData.type}`, 14, yPosition);
  yPosition += 6;
  doc.text(
    `Period: ${new Date(reportData.periodStart).toLocaleDateString()} - ${new Date(reportData.periodEnd).toLocaleDateString()}`,
    14,
    yPosition
  );
  yPosition += 6;
  doc.text(`Generated By: ${reportData.generatedBy.name}`, 14, yPosition);
  yPosition += 6;
  doc.text(`Generated On: ${new Date(reportData.createdAt).toLocaleString()}`, 14, yPosition);
  yPosition += 12;

  // Summary Statistics Section
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Summary Statistics", 14, yPosition);
  yPosition += 8;

  const { summary } = reportData.dataSnapshot;
  
  // KPI boxes
  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  
  const kpiBoxWidth = 45;
  const kpiBoxHeight = 20;
  const kpiSpacing = 5;
  let xPosition = 14;

  // Total Items KPI
  doc.setDrawColor(200, 200, 200);
  doc.rect(xPosition, yPosition, kpiBoxWidth, kpiBoxHeight);
  doc.setFont("helvetica", "bold");
  doc.text("Total Items", xPosition + 2, yPosition + 6);
  doc.setFontSize(16);
  doc.text(summary.totalItems.toString(), xPosition + 2, yPosition + 15);
  doc.setFontSize(10);
  
  xPosition += kpiBoxWidth + kpiSpacing;

  // Total Quantity KPI
  doc.rect(xPosition, yPosition, kpiBoxWidth, kpiBoxHeight);
  doc.setFont("helvetica", "bold");
  doc.text("Total Quantity", xPosition + 2, yPosition + 6);
  doc.setFontSize(16);
  doc.text(summary.totalQuantity.toString(), xPosition + 2, yPosition + 15);
  doc.setFontSize(10);
  
  xPosition += kpiBoxWidth + kpiSpacing;

  // Total Rejects KPI
  doc.rect(xPosition, yPosition, kpiBoxWidth, kpiBoxHeight);
  doc.setFont("helvetica", "bold");
  doc.text("Total Rejects", xPosition + 2, yPosition + 6);
  doc.setFontSize(16);
  doc.text(summary.totalRejects.toString(), xPosition + 2, yPosition + 15);
  doc.setFontSize(10);
  
  xPosition += kpiBoxWidth + kpiSpacing;

  // Reject Rate KPI
  doc.rect(xPosition, yPosition, kpiBoxWidth, kpiBoxHeight);
  doc.setFont("helvetica", "bold");
  doc.text("Reject Rate", xPosition + 2, yPosition + 6);
  doc.setFontSize(16);
  doc.setTextColor(summary.rejectRate > 10 ? 220 : 0, summary.rejectRate > 10 ? 38 : 0, summary.rejectRate > 10 ? 38 : 0);
  doc.text(`${summary.rejectRate}%`, xPosition + 2, yPosition + 15);
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(10);

  yPosition += kpiBoxHeight + 15;

  // Distribution by Destination
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Distribution by Destination", 14, yPosition);
  yPosition += 8;

  const destinationData = Object.entries(reportData.dataSnapshot.byDestination).map(([dest, data]) => [
    dest,
    data.count.toString(),
    data.quantity.toString(),
    data.rejects.toString(),
    `${((data.rejects / data.quantity) * 100).toFixed(2)}%`,
  ]);

  autoTable(doc, {
    startY: yPosition,
    head: [["Destination", "Items", "Quantity", "Rejects", "Reject Rate"]],
    body: destinationData,
    theme: "grid",
    headStyles: { fillColor: [34, 139, 34] },
  });

  yPosition = (doc as any).lastAutoTable.finalY + 15;

  // Distribution by Category
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 20;
  }

  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Distribution by Category", 14, yPosition);
  yPosition += 8;

  const categoryData = Object.entries(reportData.dataSnapshot.byCategory)
    .sort((a, b) => b[1].quantity - a[1].quantity)
    .slice(0, 10)
    .map(([cat, data]) => [
      cat,
      data.count.toString(),
      data.quantity.toString(),
      data.rejects.toString(),
      `${((data.rejects / data.quantity) * 100).toFixed(2)}%`,
    ]);

  autoTable(doc, {
    startY: yPosition,
    head: [["Category", "Items", "Quantity", "Rejects", "Reject Rate"]],
    body: categoryData,
    theme: "grid",
    headStyles: { fillColor: [34, 139, 34] },
  });

  yPosition = (doc as any).lastAutoTable.finalY + 15;

  // Top Items by Quantity
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 20;
  }

  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Top 10 Items by Quantity", 14, yPosition);
  yPosition += 8;

  const topItemsData = reportData.dataSnapshot.topItems.map((item) => [
    item.itemName,
    item.batch,
    item.quantity.toString(),
    item.reject.toString(),
    item.destination,
  ]);

  autoTable(doc, {
    startY: yPosition,
    head: [["Item Name", "Batch", "Quantity", "Rejects", "Destination"]],
    body: topItemsData,
    theme: "grid",
    headStyles: { fillColor: [34, 139, 34] },
  });

  yPosition = (doc as any).lastAutoTable.finalY + 15;

  // High Reject Items
  if (reportData.dataSnapshot.highRejectItems.length > 0) {
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(220, 38, 38);
    doc.text("⚠ Items with High Reject Rates (>15%)", 14, yPosition);
    doc.setTextColor(0, 0, 0);
    yPosition += 8;

    const highRejectData = reportData.dataSnapshot.highRejectItems.map((item) => [
      item.itemName,
      item.batch,
      item.quantity.toString(),
      item.reject.toString(),
      `${item.rejectRate}%`,
    ]);

    autoTable(doc, {
      startY: yPosition,
      head: [["Item Name", "Batch", "Quantity", "Rejects", "Reject Rate"]],
      body: highRejectData,
      theme: "grid",
      headStyles: { fillColor: [220, 38, 38] },
    });

    yPosition = (doc as any).lastAutoTable.finalY + 15;
  }

  // AI Insights Section
  if (reportData.aiInsights) {
    doc.addPage();
    yPosition = 20;

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("AI-Generated Insights", 14, yPosition);
    yPosition += 10;

    try {
      const insights = JSON.parse(reportData.aiInsights);
      
      // Findings
      if (insights.findings && insights.findings.length > 0) {
        doc.setFontSize(12);
        doc.setFont("helvetica", "bold");
        doc.text("Key Findings:", 14, yPosition);
        yPosition += 8;
        
        doc.setFontSize(10);
        doc.setFont("helvetica", "normal");
        insights.findings.forEach((finding: string, index: number) => {
          const lines = doc.splitTextToSize(`${index + 1}. ${finding}`, pageWidth - 28);
          doc.text(lines, 14, yPosition);
          yPosition += lines.length * 6;
        });
        yPosition += 5;
      }

      // Alerts
      if (insights.alerts && insights.alerts.length > 0) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }

        doc.setFontSize(12);
        doc.setFont("helvetica", "bold");
        doc.setTextColor(220, 38, 38);
        doc.text("⚠ Alerts:", 14, yPosition);
        doc.setTextColor(0, 0, 0);
        yPosition += 8;
        
        doc.setFontSize(10);
        doc.setFont("helvetica", "normal");
        insights.alerts.forEach((alert: string, index: number) => {
          const lines = doc.splitTextToSize(`${index + 1}. ${alert}`, pageWidth - 28);
          doc.text(lines, 14, yPosition);
          yPosition += lines.length * 6;
        });
        yPosition += 5;
      }

      // Recommendations
      if (insights.recommendations && insights.recommendations.length > 0) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }

        doc.setFontSize(12);
        doc.setFont("helvetica", "bold");
        doc.text("Recommendations:", 14, yPosition);
        yPosition += 8;
        
        doc.setFontSize(10);
        doc.setFont("helvetica", "normal");
        insights.recommendations.forEach((rec: string, index: number) => {
          const lines = doc.splitTextToSize(`${index + 1}. ${rec}`, pageWidth - 28);
          doc.text(lines, 14, yPosition);
          yPosition += lines.length * 6;
        });
        yPosition += 5;
      }

      // Predictions
      if (insights.predictions && insights.predictions.length > 0) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }

        doc.setFontSize(12);
        doc.setFont("helvetica", "bold");
        doc.text("Predictions:", 14, yPosition);
        yPosition += 8;
        
        doc.setFontSize(10);
        doc.setFont("helvetica", "normal");
        insights.predictions.forEach((pred: string, index: number) => {
          const lines = doc.splitTextToSize(`${index + 1}. ${pred}`, pageWidth - 28);
          doc.text(lines, 14, yPosition);
          yPosition += lines.length * 6;
        });
      }
    } catch (error) {
      console.error("Error parsing AI insights:", error);
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text("AI insights are available but could not be formatted.", 14, yPosition);
    }
  }

  // Footer on all pages
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(
      `Page ${i} of ${pageCount}`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: "center" }
    );
    doc.text(
      "MAIS Inventory System - Confidential",
      14,
      doc.internal.pageSize.getHeight() - 10
    );
  }

  return doc;
}
