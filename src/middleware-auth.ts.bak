import createMiddleware from 'next-intl/middleware';
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/services/auth';
import { hasRouteAccess, getDefaultDashboard } from '@/utils/rbac';
import { locales, defaultLocale } from '@/i18n';

// Define public routes that don't require authentication
const publicRoutes = ['/login', '/register'];

// Define auth routes (redirect to dashboard if already authenticated)
const authRoutes = ['/login', '/register'];

/**
 * Check if path is a public route
 */
function isPublicRoute(pathname: string): boolean {
  // Remove locale prefix
  const cleanPath = pathname.replace(/^\/(en|ar)/, '');

  return publicRoutes.some(
    (route) => cleanPath === route || cleanPath.startsWith(`${route}/`)
  );
}

/**
 * Check if path is an auth route
 */
function isAuthRoute(pathname: string): boolean {
  // Remove locale prefix
  const cleanPath = pathname.replace(/^\/(en|ar)/, '');

  return authRoutes.some(
    (route) => cleanPath === route || cleanPath.startsWith(`${route}/`)
  );
}

// Create the next-intl middleware
const intlMiddleware = createMiddleware({
  locales: locales as any,
  defaultLocale: defaultLocale as any,
  localePrefix: 'always',
});

export default auth(async function middleware(request) {
  const { pathname } = request.nextUrl;

  // Skip middleware for static files, API routes, and Next.js internals
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/api') ||
    pathname.includes('.') // files with extensions
  ) {
    return NextResponse.next();
  }

  // Apply next-intl middleware first for locale handling
  const intlResponse = intlMiddleware(request as NextRequest);

  // Get the locale from the pathname after intl middleware
  const locale = pathname.split('/')[1] || defaultLocale;

  // Get session
  const session = request.auth;

  // Handle authentication
  if (!session) {
    // Allow access to public routes
    if (isPublicRoute(pathname)) {
      return intlResponse;
    }

    // Redirect to login for protected routes
    const loginUrl = new URL(`/${locale}/login`, request.url);
    loginUrl.searchParams.set('callbackUrl', pathname);
    return NextResponse.redirect(loginUrl);
  }

  // User is authenticated
  const userRole = session.user.role;

  // Redirect authenticated users away from auth pages
  if (isAuthRoute(pathname)) {
    const dashboardUrl = new URL(
      `/${locale}${getDefaultDashboard(userRole)}`,
      request.url
    );
    return NextResponse.redirect(dashboardUrl);
  }

  // Check role-based access
  if (!hasRouteAccess(userRole, pathname)) {
    // Redirect to appropriate dashboard if no access
    const dashboardUrl = new URL(
      `/${locale}${getDefaultDashboard(userRole)}`,
      request.url
    );
    return NextResponse.redirect(dashboardUrl);
  }

  // Handle root path redirect
  if (pathname === `/${locale}` || pathname === `/${locale}/`) {
    const dashboardUrl = new URL(
      `/${locale}${getDefaultDashboard(userRole)}`,
      request.url
    );
    return NextResponse.redirect(dashboardUrl);
  }

  return intlResponse;
});

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public files (public folder)
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\..*|api).*)',
  ],
};
